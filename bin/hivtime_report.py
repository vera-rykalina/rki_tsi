#!/usr/bin/env python3

# Import libraries
import argparse
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re


# Global variables 
_args = None

def initialise():
    '''
    Parse command-line arguments.
    '''
    global _args
    parser = argparse.ArgumentParser( description="A script to collect all intermediate reports in one final report" )
    parser.add_argument( "-t", "--phylotsi", required=True, help="A comma-separated file generated by HIV-phyloTSI." )
    parser.add_argument( "-q", "--multiqc", required=True, help="A comma-separated file with data exctacted from MultiQC report" )
    parser.add_argument( "-m", "--mapping", required=True, help="A comma-separated file with mapping notes" )
    parser.add_argument( "-o", "--outpath", required=True, help="A filename for saving a final report and a plot. [STRING]" )
    _args = parser.parse_args()
    return

def rework_hivphylotsi_table(fpath):
    ''' Load HIV-phyloTSI output file. '''
    phylotsi = pd.read_csv(fpath, sep=",", index_col=False)
    print("Loaded HIV-phyloTSI file, shape={}".format(phylotsi.shape))
   
    # Keep only useful columns (host.id and all other which start with RF_)
    phylotsi = phylotsi.filter(regex = "^host|^RF_", axis = 1)
    
    # Remove RF_pred_sqrt
    phylotsi.drop(["RF_pred_sqrt", "RF_std", "RF_cc025", "RF_cc975", "RF_pred_MAE"], axis=1, inplace=True)
    
    # Create "id" columns based on "host.id" (extract our internal ID, when long IDs are used)
    # phylotsi["Scount"] =  phylotsi["host.id"].str.extract("\w+HIV(\d{2}-\d{5})_\w+", expand = True)
    phylotsi["id"] = phylotsi["host.id"]
    
    # Swap columns to have "id" first
    phylotsi = phylotsi.iloc[:, [-1, 0] + list(range(1, phylotsi.shape[1] - 1 ))]
    
    # Sort df by "id"
    phylotsi.sort_values(by=["id"], inplace = True)
    
    # Convert years to months
    phylotsi["RF_pred_linear"] = phylotsi["RF_pred_linear"].apply(lambda x: x*12)
    phylotsi["RF_pred_min_linear"] = phylotsi["RF_pred_min_linear"].apply(lambda x: x*12)
    phylotsi["RF_pred_max_linear"] = phylotsi["RF_pred_max_linear"].apply(lambda x: x*12)

    # Round "RF_pred_linear" values
    phylotsi["RF_pred_linear"] = phylotsi["RF_pred_linear"].apply(lambda x: round(x, 2))
    phylotsi["RF_pred_min_linear"] = phylotsi["RF_pred_min_linear"].apply(lambda x: round(x, 2))
    phylotsi["RF_pred_max_linear"] = phylotsi["RF_pred_max_linear"].apply(lambda x: round(x, 2))
    return phylotsi

def plot(phylotsi):
    tsi_plot_df = phylotsi.copy()
    
    # Visualisation
    sns.set_style("darkgrid")
    sns.set_context("poster")
    fig, ax = plt.subplots(figsize=(16, 12))

    # Plot
    barplot = sns.barplot(x="RF_pred_linear", y="id", data=tsi_plot_df, palette="GnBu_d")

    # Set limits and ticks for x
    barplot.set_xlim(0, int(tsi_plot_df["RF_pred_linear"].max() + 7))
    barplot.set_xticks(range(0, int(tsi_plot_df["RF_pred_linear"].max() + 7), 6))
    
    # Add labels and title
    ax.set(xlabel = "TSI (months)", ylabel = "Sample ID",
           title = "Estimation of Time since Infection using HIV-phyloTSI Model")

    # Add some extra white space
    fig.tight_layout(pad=1)

    # Add values to bars
    for container in ax.containers:
        ax.bar_label(container)
    
    # Save a figure
    barplot_fig = barplot.get_figure()

    return barplot_fig

def load_mutliqc_report_table(fpath):
    ''' Load MultiQC report file. '''
    multiqc = pd.read_csv(fpath, sep=",", index_col=False)
    print("Loaded MultiQC file, shape={}".format(multiqc.shape))
    return multiqc

def load_mapping_notes_table(fpath):
    ''' Load mapping report file. '''
    mapping_notes = pd.read_csv(fpath, sep=",", index_col=False, names=["id", "mapping_note"])
    print("Loaded file with mapping notes, shape={}".format(mapping_notes.shape))
    return mapping_notes

def merge_all_tables(phylotsi, multiqc, mapping_notes):
    # Merge 3 dfs by id
    hivtime_report = phylotsi.merge(multiqc, on="id", how="left").merge(mapping_notes, on="id", how="left")
    hivtime_report.rename(columns={"id":"sample_id", "RF_pred_linear":"rf_pred_linear", 
                                   "RF_pred_min_linear":"rf_pred_min_linear", 
                                   "RF_pred_max_linear":"rf_pred_max_linear"}, inplace=True)
    return hivtime_report

def save_hivtime_report(hivtime_report, barplot_fig, outf):
    ''' Write output. '''
    hivtime_report.to_csv(outf + ".csv", sep=",", header = True, index=False, encoding="utf-8")
    print("Output saved as {} with .csv or .png extensions.".format(outf))
    barplot_fig.savefig(outf + ".png", dpi = 300)


def main():
    ''' Create a final report. '''
    phylotsi = rework_hivphylotsi_table(_args.phylotsi)
    multiqc = load_mutliqc_report_table(_args.multiqc)
    mapping_notes = load_mapping_notes_table(_args.mapping)
    barplot_fig = plot(phylotsi)
    hivtime_report = merge_all_tables(phylotsi, multiqc, mapping_notes)
    save_hivtime_report(hivtime_report, barplot_fig, _args.outpath)

if __name__ == '__main__':
    initialise()
    main()
